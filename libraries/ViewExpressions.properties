# Copyright (c) 2021 Caterpillar

## This file contains the expressions defined in hbm files for functions in Views.

alarm.name.query = ALARM_TYPE_NAME
alarm.description.query = MESSAGE
alarm.creationTime.query = dbo.displayLocalTime(ALARM.START_TIME_UTC)
alarm.priorityName.query = (Select Description from VC_alarmPriority Where Code = ALARM.PRIORITY)
alarm.severityName.query = (Select Description from VC_alarmSeverity Where Code = ALARM.SEVERITY)
alarm.sourceSystem.query = (Select Description from VC_alarmSourceType Where Code = ALARM.SOURCE_TYPE)
alarmtype.description.query = MESSAGE_FORMAT
alarmtype.priorityName.query = (Select Description from VC_alarmPriority Where Code = ALARMTYPE.PRIORITY)
alarmtype.severityName.query = (Select Description from VC_alarmSeverity Where Code = ALARMTYPE.SEVERITY)
roadsegment.name.query = (Select name From V_Waypoint Where OID = ROADSEGMENT.START1) + '-' + (Select name From V_Waypoint Where OID = ROADSEGMENT.endWaypoint)
histogramCell.label.query = convert(VARCHAR(50),round(dbo.unit_conv(LOWER,null,UNIT_TYPE),2))+' - '+convert(VARCHAR(50),round(dbo.unit_conv(UPPER,null,UNIT_TYPE),2))
histogramCell.category_num.query = convert(int,substring(PAYLOAD_CELL_DEF.category,0,(charindex('.',PAYLOAD_CELL_DEF.category))))
fmi.id.query= FMI_DEF.oid
fmi.description.query= name
cid.id.query = OID
cid.description.query = name
mid.id.query = oid
mid.description.query = NAME
measure.description.query = name
measure.displaycode.query = PROTOCOL_DISPLAYCODE
null.query = NULL
cause.id.query = OID
fault.id.query = OID
measure.unitName.expr = dbo.unit_name( 'FULL',NULL,MEASURE_DEF.UNIT_TYPE)
channel.unitName.query = dbo.unit_name( 'FULL',NULL,CHANNEL_DEF.UNIT_TYPE)
measure.name.expr =(select name from v_measure_def)
cumulative.unitName.query = dbo.unit_name( 'FULL',NULL,CUM_DEF.UNIT_TYPE)
datalog.unitName.query = dbo.unit_name( 'FULL',NULL,DATALOG_DEF.UNIT_TYPE)
healthEvent.firstValue_Q.query = (CASE WHEN dbo.channel_display_text_bychannel(HEALTH_EVENT.CHANNEL_NUMBER, HEALTH_EVENT.FIRST,NULL) IS NOT NULL THEN NULL ELSE dbo.UNIT_CONV(HEALTH_EVENT.FIRST, NULL, ISNULL(HEALTH_EVENT.FIRSTUNITS,'unitless'))END)
healthEvent.firstValue_U.query = (CASE WHEN dbo.channel_display_text_bychannel(HEALTH_EVENT.CHANNEL_NUMBER, HEALTH_EVENT.FIRST,NULL) IS NOT NULL THEN dbo.UNIT_NAME('FULL', NULL, 'unitless') ELSE dbo.UNIT_NAME('FULL', NULL, HEALTH_EVENT.FIRSTUNITS) END)
healthEvent.firstValue_D.query = dbo.channel_display_text_bychannel(HEALTH_EVENT.CHANNEL_NUMBER, HEALTH_EVENT.FIRST,NULL)
healthEvent.worstValue_Q.query = (CASE WHEN dbo.channel_display_text_bychannel(HEALTH_EVENT.CHANNEL_NUMBER, HEALTH_EVENT.WORST,NULL) IS NOT NULL THEN NULL ELSE dbo.UNIT_CONV(HEALTH_EVENT.WORST, NULL, ISNULL(HEALTH_EVENT.WORSTUNITS,'unitless')) END)
healthEvent.worstValue_U.query = (CASE WHEN dbo.channel_display_text_bychannel(HEALTH_EVENT.CHANNEL_NUMBER, HEALTH_EVENT.WORST,NULL) IS NOT NULL THEN dbo.UNIT_NAME('FULL', NULL, 'unitless') ELSE dbo.UNIT_NAME('FULL', NULL, HEALTH_EVENT.WORSTUNITS) END)
healthEvent.worstValue_D.query = dbo.channel_display_text_bychannel(HEALTH_EVENT.CHANNEL_NUMBER, HEALTH_EVENT.WORST, NULL)
healthEvent.fmi_N.query = (select v_fmi_def.name + ' (' + CAST(v_fmi_def.oid AS VARCHAR(50)) + ')' from v_fmi_def where v_fmi_def.oid = health_event.fmi)
healthEvent.cid_N.query = (select v_cid_def.name + ' (' + CAST(v_cid_def.oid AS VARCHAR(50)) + ')' from v_cid_def where v_cid_def.oid = health_event.cid)
healthEvent.mid_N.query = (select case when LEN(OID)>=4 AND (CAST(SUBSTRING(FORMAT(OID,'X'),1,2) AS VARCHAR(2))='31' OR CAST(SUBSTRING(FORMAT(OID,'X'),1,2)AS VARCHAR(2))='32') THEN CASE WHEN  NAME IS NOT NULL THEN  NAME WHEN DESCRIPTION IS NOT NULL THEN DESCRIPTION ELSE CAST(OID AS VARCHAR(20)) END ELSE v_mid_def.name + ' (' + CAST(v_mid_def.oid AS VARCHAR(50)) + ')' END from v_mid_def where v_mid_def.oid = health_event.mid)
histogram.unitName.query = dbo.unit_name( 'FULL',NULL,HIST_DEF.UNIT_TYPE)
histogram.cellUnitName.query = dbo.unit_name( 'FULL',NULL,HIST_DEF.CELL_UNIT_TYPE)
histogram.channel_n.query = (SELECT distinct name FROM {model}.measure_def md, {model}.measure_association ma WHERE md.oid = ma.associated_measure_oid AND ma.association_type='CommonSource' AND ma.measure_oid = hist_def.measure_oid)
histogram.channeloid.query = hist_def.measure_oid
histogram.channelgroupoid.query = (select mg.oid from {model}.measure_group mg, {model}.measure_group_measures mgm where mg.oid = mgm.measure_group_oid and mg.group_type='System' and mgm.measure_oid=hist_def.measure_oid)
histogram.channelgroup_n.query = (select name from {model}.measure_group mg, {model}.measure_group_measures mgm where mg.oid = mgm.measure_group_oid and mg.group_type='System' and mgm.measure_oid=hist_def.measure_oid)
polled.unitName.query = dbo.unit_name( 'FULL',NULL,POLLED_DEF.UNIT_TYPE)
snapshot.unitName.query = dbo.unit_name( 'FULL',NULL,SNAPSHOT_DEF.UNIT_TYPE)
trend.unitName.query = dbo.unit_name( 'FULL',NULL,TREND_DEF.UNIT_TYPE)
cycle.durationCalculated.query = dbo.TIMESTAMP_DIFF(ENDTIME_UTC,STARTTIME_UTC)
cycleComponent.durationCalculated.query = dbo.TIMESTAMP_DIFF(END_TIME_UTC,START_TIME_UTC)
cycle.startSMU.query = dbo.INTERPOLATEDSMU((select PRIMARYMACHINE from CYCLE where CYCLE_OID=OID), START_TIME_UTC)
cycle.endSMU.query = dbo.INTERPOLATEDSMU((select PRIMARYMACHINE from CYCLE where CYCLE_OID=OID), END_TIME_UTC)
dataset.machinecategoryname.query = (select v_machinecategory.name from v_machineclass inner join v_machinecategory on v_machinecategory.oid = v_machineclass.classcategoryoid where v_machineclass.oid = health_log.MACHINE_CLASS_OID)
machine.machinecategoryname.query = (select v_machinecategory.name from v_machineclass inner join v_machinecategory on v_machinecategory.oid = v_machineclass.classcategoryoid where v_machineclass.oid = machine.class)
machine.tkphRate.query = (CASE WHEN MACHINE.USECLASSTYRES IS NULL OR MACHINE.USECLASSTYRES <> 0 THEN (SELECT MC.TKPHLOWESTRATE FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE TKPHRATE END)
machine.tkphMaxPercent.query = (CASE WHEN MACHINE.USECLASSTYRES IS NULL OR MACHINE.USECLASSTYRES <> 0 THEN (SELECT MC.TKPHMAXPERCENT FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE TKPHMAXPERCENT END)
machine.frontTyreTread.query = (CASE WHEN MACHINE.USECLASSTYRES IS NULL OR MACHINE.USECLASSTYRES  <> 0 THEN (SELECT MC.FRONTTYRETREAD FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE FRONTTYRETREAD END)
machine.maxPayload.query = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.MAXPAYLOAD FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE MAXPAYLOAD END)
machine.nominalPayload.query = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.NOMINALPAYLOAD FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE NOMINALPAYLOAD END)
machine.payloadAccuracy.query = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.PAYLOADACCURACY FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE PAYLOADACCURACY END)
machine.overLoad.query = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.OVERLOAD FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE OVERLOAD END)
machine.underLoad = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.UNDERLOAD FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE UNDERLOAD END)
machine.heapedCapacity.query = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.HEAPEDCAPACITY FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE HEAPEDCAPACITY END)
machine.struckCapacity.query = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.STRUCKCAPACITY FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE STRUCKCAPACITY END)
machine.rearDistributionEmpty.query = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.REARDISTRIBUTIONEMPTY FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE REARDISTRIBUTIONEMPTY END)
machine.rearDistributionLoaded.query = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.REARDISTRIBUTIONLOADED FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE REARDISTRIBUTIONLOADED END)
machine.frontDistributionEmpty.query = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.FRONTDISTRIBUTIONEMPTY FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE FRONTDISTRIBUTIONEMPTY END)
machine.frontDistributionLoaded.query = (CASE WHEN MACHINE.USECLASSPAYLOAD IS NULL OR MACHINE.USECLASSPAYLOAD <> 0 THEN (SELECT MC.FRONTDISTRIBUTIONLOADED FROM {model}.MACHINECLASS MC WHERE MC.MACHINECLASS_OID=MACHINE.CLASS) ELSE FRONTDISTRIBUTIONLOADED END)
healthlog.objecttypeid.query = (select LOG_CATEGORY)
healthlog.machinecategoryname.query = (select v_machinecategory.name from v_machine inner join v_machineclass  on v_machineclass.oid = v_machine.machineclassoid inner join v_machinecategory  on v_machinecategory.oid = v_machineclass.classcategoryoid where v_machine.oid = health_log.machine_oid)
healthlog.modeloid.query = (select vm.machineclassoid from v_machine vm where vm.oid = health_log.machine_oid)
healthlog.modelnumber.query = (select mc.name from v_machine vm, v_machineclass mc where vm.machineclassoid = mc.oid and vm.oid = health_log.machine_oid)
healthlog.model_n.query = (select mc.name from v_machine vm, v_machineclass mc where vm.machineclassoid = mc.oid and vm.oid = health_log.machine_oid)
healthlog.machinename.query = (select mv.name from v_machine mv where mv.oid = health_log.machine_oid)
healthlog.serialnumber.query = (select mv.serialnumber from v_machine mv where mv.oid = health_log.machine_oid)
delay.startSMU.query = dbo.INTERPOLATEDSMU(TARGET_MACHINE, START1_UTC)
delay.finishSMU.query = dbo.INTERPOLATEDSMU(TARGET_MACHINE, FINISH_UTC)
delay.machineclassname.query = (select v_machineclass.name from v_machineclass inner join v_machine on v_machineclass.oid = v_machine.machineclassoid where v_machine.oid = delay.target_machine)
delay.machinecategoryname.query = (select v_machinecategory.name from v_machine inner join v_machineclass  on v_machineclass.oid=v_machine.machineclassoid inner join v_machinecategory  on v_machinecategory.oid=v_machineclass.classcategoryoid where v_machine.oid= delay.target_machine)
delay.delaycategoryname.query = (select v_delaycategory.name from v_delaytype inner join v_delaycategory on v_delaycategory.oid = v_delaytype.delaycategoryoid where v_delaytype.oid = delay.delayclass)
delay.durationCalculated.query = dbo.TIMESTAMP_DIFF(FINISH_UTC,START1_UTC)
baseEvent.interpolatedSMU.query = dbo.INTERPOLATEDSMU(MACHINE_OID, TIMESTAMP_UTC)
baseEvent.machineClassOID.query = (select machineclassoid from v_machine where v_machine.oid = machine_oid)
baseEvent.machineClass_N.query = (select v_machineclass.name from v_machineclass inner join v_machine on v_machineclass.oid = v_machine.machineclassoid where v_machine.oid = machine_oid)
grade.author.query = GRADE.AUTHOR
grade.averagemethod.query = GRADE.AVERAGEMETHOD
grade.desiredvaluecont.query = GRADE.DESIREDVALUECONT
grade.desiredvaluecont_q.query = dbo.unit_conv(GRADE.DESIREDVALUECONT, GRADE.UNITNAME, GRADE.UNITTYPE)
grade.desiredvaluecont_u.query = dbo.unit_name('FULL', GRADE.UNITNAME, GRADE.UNITTYPE)
grade.desiredvaluedisc.query = GRADE.DESIREDVALUEDISC
grade.id.query = GRADE.ID
grade.maximumvalue.query = GRADE.MAXIMUMVALUE
grade.maximumvalue_q.query = dbo.unit_conv(GRADE.MAXIMUMVALUE, GRADE.UNITNAME, GRADE.UNITTYPE)
grade.maximumvalue_u.query = dbo.unit_name('FULL', GRADE.UNITNAME, GRADE.UNITTYPE)
grade.minimumvalue.query = GRADE.MINIMUMVALUE
grade.minimumvalue_q.query = dbo.unit_conv(GRADE.MINIMUMVALUE, GRADE.UNITNAME, GRADE.UNITTYPE)
grade.minimumvalue_u.query = dbo.unit_name('FULL', GRADE.UNITNAME, GRADE.UNITTYPE)
grade.objectype.query = GRADE.ECF_CLASS_ID
grade.valuecont.query = GRADE.VALUECONT
grade.valuecont_q.query = dbo.unit_conv(GRADE.VALUECONT, GRADE.UNITNAME, GRADE.UNITTYPE)
grade.valuecont_u.query = dbo.unit_name('FULL', GRADE.UNITNAME, GRADE.UNITTYPE)
grade.valuedisc.query = GRADE.VALUEDISC
gradeBlock.status.query = (case  when GRADEBLOCK.IS_ACTIVE='0' then 'Archived' else (case WHEN GRADEBLOCK.INUSE IS NULL then 'Active' else 'Inactive' end)end)
asafile.machineOID.query = (select oid from v_machine where v_machine.serialnumber = asa_file.serialnumber)
asafile.machine_n.query = (select name from v_machine where v_machine.serialnumber = asa_file.serialnumber)
asafile.machineClassOID.query = (select machineclassoid from v_machine where v_machine.serialnumber = asa_file.serialnumber)
asafile.machineClass_N.query = (select v_machineclass.name from v_machineclass inner join v_machine on v_machineclass.oid = v_machine.machineclassoid where v_machine.serialnumber = asa_file.serialnumber)
#histogramconfig.description.query = (select distinct description from V_HIST_DEF where V_HIST_DEF.FAMILY = HISTOGRAM_CONFIG.FAMILY AND V_HIST_DEF.ID=HISTOGRAM_CONFIG.ID)
histogramconfig.description.query = (case when HISTOGRAM_CONFIG.FAMILY <> 'VIMS' THEN (select distinct concat(concat(description,'-'),condition_n) from V_HIST_DEF where V_HIST_DEF.FAMILY = HISTOGRAM_CONFIG.FAMILY AND V_HIST_DEF.ID=HISTOGRAM_CONFIG.ID) ELSE (select distinct description from V_HIST_DEF where V_HIST_DEF.FAMILY = HISTOGRAM_CONFIG.FAMILY AND V_HIST_DEF.ID=HISTOGRAM_CONFIG.ID)END)
healthevent.fmiOID.query = (select oid from v_fmi_def where v_fmi_def.oid = health_event.fmi)
healthevent.cidOID.query = (select oid from v_cid_def where v_cid_def.oid = health_event.cid)
healthevent.midOID.query = (select oid from v_mid_def where v_mid_def.oid = health_event.mid)
oilsample.machineOID.query = (select m.oid from v_machine m inner join v_machine_compartment mc on mc.machineoid = m.oid where mc.oid = oil_sample.machine_compartment)
oilsample.machine_N.query = (select m.name from v_machine m inner join v_machine_compartment mc on mc.machineoid = m.oid where mc.oid = oil_sample.machine_compartment)
oilsample.machineClassOID.query = (select m.machineclassoid from v_machine m inner join v_machine_compartment mc on mc.machineoid = m.oid where mc.oid = oil_sample.machine_compartment)
oilsample.machineClass_N.query = (select c.name from v_machineclass c inner join v_machine m on c.oid = m.machineclassoid inner join v_machine_compartment mc on mc.machineoid = m.oid where mc.oid = oil_sample.machine_compartment)
dataset.datasetgroup.query =DATASET.DATASETGROUP
mmc.oid.query = CAST(MACHINE_MEASURE_CONFIG.machine_oid as VARCHAR(20)) + '.' + CAST(MACHINE_MEASURE_CONFIG.measure_oid as VARCHAR(20))
mmc.category.query = (select category from v_measure_def where oid=MACHINE_MEASURE_CONFIG.MEASURE_OID)
mmc.family.query = (select family from v_measure_def where oid=MACHINE_MEASURE_CONFIG.MEASURE_OID)
mmc.datatypeoid.query = (select datatypeoid from v_measure_def where oid=MACHINE_MEASURE_CONFIG.MEASURE_OID)
mmc.datatype_n.query = (select name from v_measure_def where oid=MACHINE_MEASURE_CONFIG.MEASURE_OID)
mmc.id.query = (select id from v_measure_def where oid=MACHINE_MEASURE_CONFIG.MEASURE_OID)
mmc.unittype.query = (select unittype from v_measure_def where oid=MACHINE_MEASURE_CONFIG.MEASURE_OID)
mmc.subid.query = (select subid from v_measure_def where oid=MACHINE_MEASURE_CONFIG.MEASURE_OID)
mmc.modelOid.query = (select machineclassoid from v_machine where oid=MACHINE_MEASURE_CONFIG.MACHINE_OID)
mmc.modelNumber.query = (select v_machineclass.name from v_machineclass inner join v_machine on v_machineclass.oid = v_machine.machineclassoid where v_machine.oid = MACHINE_MEASURE_CONFIG.MACHINE_OID)
mmc.serialNumber.query = (select serialnumber from v_machine where oid=MACHINE_MEASURE_CONFIG.MACHINE_OID)
mmc.description.query = (select case when category = 'Trend' then (name + ' ('+ conditiondef_n + '),' + type  + ','+ (case when module_n is not null then  module_n + ',' else '' end) + cast(samplerate as  varchar(20))) when category = 'Channel' and family = 'VIMS3' then (name + (case when module_n is not null then  ',' + module_n else '' end)) else name end from v_measure_def where oid=MACHINE_MEASURE_CONFIG.MEASURE_OID)

ignoreViewWhereExp = true
eventDef.name.expr = name + '(' + CAST(id AS VARCHAR(50)) + ')'
fmi.description.expr = name + '(' + CAST(oid AS VARCHAR(50)) + ')'
cid.description.expr = name + '(' + CAST(oid AS VARCHAR(50)) + ')'
mid.description.expr = case when LEN(OID)>=4 AND (CAST(SUBSTRING(FORMAT(OID,'X'),1,2) AS VARCHAR(2))='31' OR CAST(SUBSTRING(FORMAT(OID,'X'),1,2)AS VARCHAR(2))='32') THEN CASE WHEN  NAME IS NOT NULL THEN  NAME WHEN DESCRIPTION IS NOT NULL THEN DESCRIPTION ELSE CAST(OID AS VARCHAR(20)) END ELSE v_mid_def.name + ' (' + CAST(v_mid_def.oid AS VARCHAR(50)) + ')' END
delay.startTime.expr = starttime + '-' + (select name from v_delaytype where oid=delaytypeoid)
scheduledAssignment.reason.expr =  'Scheduled Assignment - ' + reason
cycle.primaryMachineName.expr ='Cycle - ' || PRIMARYMACHINENAME
dbdefaults.currentdate.expr = GETDATE()
dbdefaults.currentdateinsec.expr = DATEDIFF(SECOND,'1-Jan-1970',SYSUTCDATETIME())
issueCyclesquery = SELECT b.cycle_oid AS cycleOid, a.endtime_utc AS new_start_time FROM cycle a, cycle b WHERE b.starttime_utc = a.starttime_utc and b.endtime_utc > a.endtime_utc AND a.primarymachine = b.primarymachine AND a.cycle_oid < b.cycle_oid AND a.ecf_class_id like '%LoaderCycle' AND (a.endtime_utc > ?) AND (a.starttime_utc < ?)
calendarDiagnosticsquery = select top (1) name, locale, timezone_id from (select count(OID) Ax, name, locale, timezone_id from R_CALENDAR where SYSTEM = '?' group by name, locale, timezone_id)A order by Ax desc
kpisumminspectquery = cycle_s_fact_main where endtime > ? and starttime < ? and cycleoid in
kpisummInspectQuery1 = select cycleoid cycleOid, cycletype, starttime, endtime, substring(primarymachinename,0,10) target,totaltime, abs(DATEDIFF(minute,starttime,endtime)-totaltime) diff from cycle_s_fact_main where endtime > ? and starttime < ?
kpisummInspectQuery2 = select cycleoid cycleOid, cycletype,starttime , endtime, substring(primarymachinename,0,10) target from cycle_s_fact_main where endtime > ? and starttime < ?
kpisummInspectQuery2plus = and cycleOid in
kpisummInspectQueryUserTable = Select table_name from information_schema.tables where Table_name like 'CYCLE_DIM_%'
kpisummInspectTimeDifferenceQuery = and abs(DATEDIFF(minute,starttime,endtime)-totaltime) > 1 order by target, diff desc, starttime
kpisummInspectCheckTotalTimeQuery = and abs(DATEDIFF(minute,starttime,endtime)-totaltime) > 1
elipseHourOperated = SELECT primaryoperatorpersonnelid,primarymachinename, endtime,round((sum(operatingtime / 3600)), 2) FROM cycle_s_fact_main WHERE starttime >= ? AND endtime <= ? AND primaryoperatorpersonnelid is not null AND primarymachinename is not null GROUP BY primaryoperatorpersonnelid, primarymachinename,endtime HAVING round((sum(operatingtime / 3600)), 2) >= ? ORDER BY endtime
rawmmsDataQuery = UPDATE & SET dumprec = '-1' WHERE truck = ? AND dumprec != '-1'AND dbo.translate(upper(dumprec), '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ', '0123456789--------------------------') like '%-%'
rawmmsDataQuery2 = UPDATE & SET dumprec = '-1' WHERE truck = ? AND dumprec != '-1' AND (id - (dumprec)) > 100
mergeSQL.CONDITION_DEF = MERGE INTO CONDITION_DEF M USING TMP_CONDITION_DEF TM ON (TM.OID = M.OID) WHEN MATCHED THEN UPDATE SET M.NAME=TM.NAME WHEN NOT MATCHED THEN INSERT (OID, FAMILY, PROTOCOL_CONDITION_ID, NAME) VALUES (TM.OID, TM.FAMILY, TM.PROTOCOL_CONDITION_ID, TM.NAME)
mergeSQL.CHANNEL_DISPLAY = MERGE INTO CHANNEL_DISPLAY C USING TMP_CHANNEL_DISPLAY TD ON (TD.OID = C.OID) WHEN MATCHED THEN UPDATE SET C.ID = TD.ID, C.DISPLAYCODE = TD.DISPLAYCODE, C.DESCRIPTION = TD.DESCRIPTION, C.CHANNELVALUE = TD.CHANNELVALUE, C.ALTVALUE=TD.ALTVALUE WHEN NOT MATCHED THEN INSERT (OID, ID, DISPLAYCODE, DESCRIPTION, CHANNELVALUE, ALTVALUE) VALUES (TD.OID, TD.ID, TD.DISPLAYCODE, TD.DESCRIPTION, TD.CHANNELVALUE, TD.ALTVALUE)
mergeSQL.MODULE_DEF = MERGE INTO MODULE_DEF M USING TMP_MODULE_DEF TM ON (TM.OID = M.OID) WHEN MATCHED THEN UPDATE SET M.NAME=TM.NAME WHEN NOT MATCHED THEN INSERT (OID, NAME) VALUES (TM.OID, TM.NAME)
mergeSQL.MEASURE_DEF = MERGE INTO MEASURE_DEF M USING TMP_MEASURE_DEF TM ON (TM.OID = M.OID) WHEN MATCHED THEN UPDATE SET M.FAMILY = TM.FAMILY, M.MEASURE_CATEGORY = TM.MEASURE_CATEGORY, M.PROTOCOL_DISPLAYCODE = TM.PROTOCOL_DISPLAYCODE, M.NAME = TM.NAME, M.UNIT_TYPE = TM.UNIT_TYPE,M.PROTOCOL_ID=TM.PROTOCOL_ID, M.PROTOCOL_NAME=TM.PROTOCOL_NAME, M.PROTOCOL_SUBID=TM.PROTOCOL_SUBID, M.PROTOCOL_PID=TM.PROTOCOL_PID, M.PROTOCOL_UNIT_NAME=TM.PROTOCOL_UNIT_NAME,M.PROTOCOL_SAMPLE_SCALE=TM.PROTOCOL_SAMPLE_SCALE, M.PROTOCOL_LSB=TM.PROTOCOL_LSB, M.PROTOCOL_SAMPLE_SIGNED=TM.PROTOCOL_SAMPLE_SIGNED, M.PROTOCOL_BYTE_SIZE=TM.PROTOCOL_BYTE_SIZE, M.SAMPLE_DELAY=TM.SAMPLE_DELAY, M.VALUES_CONTAIN_FMI = TM.VALUES_CONTAIN_FMI, M.VALUES_ARE_BOOLEAN = TM.VALUES_ARE_BOOLEAN, M.CONDITION_DEF_OID = TM.CONDITION_DEF_OID,M.PROTOCOL_OFFSET=TM.PROTOCOL_OFFSET WHEN NOT MATCHED THEN INSERT (OID, FAMILY, MEASURE_CATEGORY, MEASURE_METHOD, NAME,UNIT_TYPE,PROTOCOL_DISPLAYCODE,PROTOCOL_ID,PROTOCOL_NAME,PROTOCOL_SUBID,PROTOCOL_PID,PROTOCOL_UNIT_NAME,FAVORITE,PROTOCOL_SAMPLE_SCALE,PROTOCOL_LSB,PROTOCOL_SAMPLE_SIGNED,PROTOCOL_BYTE_SIZE,SAMPLE_DELAY,VALUES_CONTAIN_FMI,VALUES_ARE_BOOLEAN, CONDITION_DEF_OID,PROTOCOL_OFFSET) VALUES (TM.OID, TM.FAMILY, TM.MEASURE_CATEGORY, TM.MEASURE_METHOD, TM.NAME, TM.UNIT_TYPE, TM.PROTOCOL_DISPLAYCODE, TM.PROTOCOL_ID, TM.PROTOCOL_NAME, TM.PROTOCOL_SUBID, TM.PROTOCOL_PID, TM.PROTOCOL_UNIT_NAME, 0, TM.PROTOCOL_SAMPLE_SCALE, TM.PROTOCOL_LSB, TM.PROTOCOL_SAMPLE_SIGNED, TM.PROTOCOL_BYTE_SIZE, TM.SAMPLE_DELAY, TM.VALUES_CONTAIN_FMI, TM.VALUES_ARE_BOOLEAN, TM.CONDITION_DEF_OID, TM.PROTOCOL_OFFSET)
mergeSQL.MEASURE_DEF_GENERATED = MERGE INTO MEASURE_DEF M USING MEASURE_DEF TM ON (TM.OID != M.OID AND TM.PROTOCOL_ID = M.PROTOCOL_ID  AND TM.PROTOCOL_SUBID = M.PROTOCOL_SUBID  AND TM.FAMILY IN ('VIMS3','J1939','TPI') AND M.FAMILY=TM.FAMILY AND TM.MEASURE_CATEGORY = CONCAT(M.MEASURE_CATEGORY,'Template')) WHEN MATCHED THEN UPDATE SET M.NAME = TM.NAME, M.UNIT_TYPE = TM.UNIT_TYPE, M.PROTOCOL_NAME=TM.PROTOCOL_NAME, M.PROTOCOL_UNIT_NAME=TM.PROTOCOL_UNIT_NAME,M.PROTOCOL_SAMPLE_SCALE=TM.PROTOCOL_SAMPLE_SCALE, M.PROTOCOL_SAMPLE_SIGNED=TM.PROTOCOL_SAMPLE_SIGNED, M.PROTOCOL_BYTE_SIZE=TM.PROTOCOL_BYTE_SIZE, M.PROTOCOL_DISPLAYCODE = TM.PROTOCOL_DISPLAYCODE, M.PROTOCOL_LSB = TM.PROTOCOL_LSB, M.PROTOCOL_OFFSET = TM.PROTOCOL_OFFSET
mergeSQL.MEASURE_GROUP = MERGE INTO MEASURE_GROUP M USING TMP_MEASURE_GROUP TM ON (TM.OID = M.OID) WHEN MATCHED THEN UPDATE SET M.NAME=TM.NAME, M.GROUP_TYPE=TM.GROUP_TYPE WHEN NOT MATCHED THEN INSERT (OID, NAME, FAVORITE, GROUP_TYPE) VALUES (TM.OID, TM.NAME, TM.FAVORITE, TM.GROUP_TYPE)
mergeSQL.MEASURE_GROUP_MEASURES = DELETE FROM MEASURE_GROUP_MEASURES WHERE MEASURE_GROUP_OID IN (SELECT OID FROM MEASURE_GROUP WHERE GROUP_TYPE = 'System'); INSERT INTO MEASURE_GROUP_MEASURES SELECT * FROM TMP_MEASURE_GROUP_MEASURES
mergeSQL.MEASURE_ASSOCIATION = DELETE FROM MEASURE_ASSOCIATION WHERE ASSOCIATION_TYPE in ('CommonSource', 'Source'); INSERT INTO MEASURE_ASSOCIATION SELECT * FROM TMP_MEASURE_ASSOCIATION; INSERT INTO dbo.MEASURE_ASSOCIATION (MEASURE_OID, ASSOCIATED_MEASURE_OID, ASSOCIATION_TYPE) SELECT TREND.OID, A.ASSOCIATED_MEASURE_OID, 'CommonSource' FROM dbo.MEASURE_DEF TREND JOIN dbo.MEASURE_DEF TRENDTEMPLATE ON TREND.PROTOCOL_ID=TRENDTEMPLATE.PROTOCOL_ID AND TREND.PROTOCOL_SUBID=TRENDTEMPLATE.PROTOCOL_SUBID AND TREND.FAMILY=TRENDTEMPLATE.FAMILY JOIN MEASURE_ASSOCIATION A ON TRENDTEMPLATE.OID = A.MEASURE_OID WHERE A.ASSOCIATION_TYPE = 'CommonSource' AND TRENDTEMPLATE.FAMILY IN ('VIMS3','TPI') AND TREND.MEASURE_CATEGORY = 'Trend' AND TRENDTEMPLATE.MEASURE_CATEGORY = 'TrendTemplate';
mergeSQL.EVENT_DEF = MERGE INTO EVENT_DEF ED USING TMP_EVENT_DEF TED ON (TED.OID = ED.OID) WHEN MATCHED THEN UPDATE SET ED.EVENTLEVEL = TED.EVENTLEVEL, ED.UNIT_TYPE = TED.UNIT_TYPE, ED.ACTUATELEVEL = TED.ACTUATELEVEL, ED.DEACTUATELEVEL = TED.DEACTUATELEVEL, ED.ERRORTYPE = TED.ERRORTYPE, ED.NAME = TED.NAME, ED.PRIMARY_CONDITION = TED.PRIMARY_CONDITION, ED.ALTNAME = TED.ALTNAME, ED.ACTUATELEVELDESC = TED.ACTUATELEVELDESC, ED.DEACTUATELEVELDESC = TED.DEACTUATELEVELDESC, ED.MEASURE_OID = TED.MEASURE_OID WHEN NOT MATCHED THEN INSERT (OID, ID, FAMILY, EVENTLEVEL, UNIT_TYPE, ACTUATELEVEL, DEACTUATELEVEL, ERRORTYPE, NAME, ALTNAME, PRIMARY_CONDITION, ACTUATELEVELDESC, DEACTUATELEVELDESC, MEASURE_OID) VALUES (TED.OID, TED.ID, TED.FAMILY, TED.EVENTLEVEL, TED.UNIT_TYPE, TED.ACTUATELEVEL, TED.DEACTUATELEVEL, TED.ERRORTYPE, TED.NAME, TED.ALTNAME, TED.PRIMARY_CONDITION, TED.ACTUATELEVELDESC, TED.DEACTUATELEVELDESC, TED.MEASURE_OID)
mergeSQL.CID_DEF = MERGE INTO CID_DEF M USING TMP_CID_DEF TM ON (TM.OID = M.OID) WHEN MATCHED THEN UPDATE SET M.NAME=TM.NAME WHEN NOT MATCHED THEN INSERT (OID, NAME) VALUES (TM.OID, TM.NAME)
mergeSQL.FMI_DEF = MERGE INTO FMI_DEF M USING TMP_FMI_DEF TM ON (TM.OID = M.OID) WHEN MATCHED THEN UPDATE SET M.NAME=TM.NAME WHEN NOT MATCHED THEN INSERT (OID, NAME) VALUES (TM.OID, TM.NAME)
mergeSQL.CAUSE_DEF = MERGE INTO CAUSE_DEF C USING TMP_CAUSE_DEF CD ON (CD.OID = C.OID) WHEN MATCHED THEN UPDATE SET C.SEQUENCE = CD.SEQUENCE, C.FMI = CD.FMI, C.COMPONENT = CD.COMPONENT, C.CAUSE = CD.CAUSE WHEN NOT MATCHED THEN INSERT (OID, SEQUENCE, FMI, COMPONENT, CAUSE) VALUES (CD.OID, CD.SEQUENCE, CD.FMI, CD.COMPONENT, CD.CAUSE)
mergeSQL.FAULT_DEF = MERGE INTO FAULT_DEF F USING TMP_FAULT_DEF FD ON (FD.OID = F.OID) WHEN MATCHED THEN UPDATE SET F.SEQUENCE = FD.SEQUENCE, F.FMI = FD.FMI, F.COMPONENT = FD.COMPONENT, F.FAULT = FD.FAULT WHEN NOT MATCHED THEN INSERT (OID, SEQUENCE, FMI, COMPONENT, FAULT) VALUES (FD.OID, FD.SEQUENCE, FD.FMI, FD.COMPONENT, FD.FAULT)
mergeSQL.HIST_DEF = MERGE INTO HIST_DEF H USING TMP_HIST_DEF TH ON (TH.OID = H.OID) WHEN MATCHED THEN UPDATE SET H.NAME=TH.NAME, H.DESCRIPTION=TH.DESCRIPTION, H.ALTNAME=TH.ALTNAME, H.MEASURE_OID=TH.MEASURE_OID, H.CONDITION_OID=TH.CONDITION_OID, H.UNIT_TYPE=TH.UNIT_TYPE, H.CELL_UNIT_TYPE=TH.CELL_UNIT_TYPE WHEN NOT MATCHED THEN INSERT (OID, HIST_ID, FAMILY, NAME, ALTNAME, DESCRIPTION, UNIT_TYPE, CELL_UNIT_TYPE) VALUES (TH.OID, TH.HIST_ID, TH.FAMILY, TH.NAME, TH.ALTNAME, TH.DESCRIPTION, TH.UNIT_TYPE, TH.CELL_UNIT_TYPE)
mergeSQL.HIST_CELL_DEF = MERGE INTO HIST_CELL_DEF H USING TMP_HIST_CELL_DEF TH ON (TH.OID = H.OID) WHEN MATCHED THEN UPDATE SET H.UNIT_TYPE=TH.UNIT_TYPE, H.LOWER=TH.LOWER, H.UPPER=TH.UPPER WHEN NOT MATCHED THEN INSERT (OID, HIST_ID, CELL_NUMBER, UNIT_TYPE, LOWER, UPPER) VALUES (TH.OID, TH.HIST_ID, TH.CELL_NUMBER, TH.UNIT_TYPE, TH.LOWER, TH.UPPER)
mergeSQL.MACHINE_MODEL = MERGE INTO MACHINE_MODEL M USING TMP_MACHINE_MODEL TM ON (TM.OID = M.OID AND TM.SERIAL_NUM_PREFIX = M.SERIAL_NUM_PREFIX AND TM.MODEL_CODE = M.MODEL_CODE AND TM.FAMILY_CODE = M.FAMILY_CODE) WHEN MATCHED THEN UPDATE SET M.FAMILY=TM.FAMILY WHEN NOT MATCHED THEN INSERT (OID, SERIAL_NUM_PREFIX, MODEL_CODE, FAMILY, FAMILY_CODE) VALUES (TM.OID, TM.SERIAL_NUM_PREFIX, TM.MODEL_CODE, TM.FAMILY, TM.FAMILY_CODE)
measure.channeloid.query = (CASE WHEN measure_def.measure_category='Channel' OR measure_def.measure_category='ChannelTemplate' THEN measure_def.oid ELSE (select ma.associated_measure_oid from {model}.measure_association ma where ma.measure_oid=measure_def.oid and association_type='CommonSource') END)
measure.channel_n.query = (CASE WHEN measure_def.measure_category='Channel' OR measure_def.measure_category='ChannelTemplate' THEN measure_def.name ELSE (SELECT distinct name FROM {model}.measure_def md, {model}.measure_association ma WHERE md.oid = ma.associated_measure_oid AND ma.association_type='CommonSource' AND ma.measure_oid = measure_def.oid) END)
measure.channelgroup_n.query = (select name from {model}.measure_group mg, {model}.measure_group_measures mgm where mg.oid = mgm.measure_group_oid and mg.group_type='System' and mgm.measure_oid=measure_def.oid)
measure.channelgroupoid.query = (select mg.oid from {model}.measure_group mg, {model}.measure_group_measures mgm where mg.oid = mgm.measure_group_oid and mg.group_type='System' and mgm.measure_oid=measure_def.oid)
measure.tempoid.query = family  +  '.'  +  measure_category  +  '.'  +  CAST(protocol_id AS VARCHAR(50))  +  '.'  +  convert(varchar(3), protocol_subid) +  CASE when measure_category = 'Trend' THEN '.'  +  CASE WHEN module_def_oid is null THEN '0' ELSE CAST(module_def_oid AS VARCHAR(50)) END  +  '.'  +  CASE when family = 'VIMS' THEN CAST(round(sample_delay/60,0) AS VARCHAR(50)) ELSE CAST(sample_delay AS VARCHAR(50)) END  +  '.0.'  +  CASE WHEN measure_method = 'Average' THEN 'AVERAGE (3, 0x3)' WHEN measure_method = 'Maximum' THEN 'MAX (2, 0x2)' WHEN measure_method = 'Minimum' THEN 'MIN (1, 0x1)' ELSE 'DEFAULT (0, 0x0)' END  +  '.'  +  CASE WHEN condition_def_oid is null THEN '0' ELSE (select c.name from v_condition_def c where c.oid=condition_def_oid) END ELSE '' END
measure.mid.query = MODULE_DEF_OID
measure.condition.query = (SELECT name FROM {model}.CONDITION_DEF CD WHERE CD.OID = MEASURE_DEF.CONDITION_DEF_OID)
measureGroup.name.query = NAME
measureGroup.alternatename.query = ALTERNATENAME
measureGroup.machineClassOid.query = (SELECT OID FROM V_MACHINECLASS MC WHERE MC.NAME=MACHINE_MODEL)
measureGroup.machineClass_n.query = (SELECT NAME FROM V_MACHINECLASS MC WHERE MC.NAME=MACHINE_MODEL)
measureGroupMeasures.machineClassOid.query = (SELECT machineClassOid FROM V_MEASURE_GROUP MG WHERE MG.OID=MEASURE_GROUP_MEASURES.MEASURE_GROUP_OID)
measureGroupMeasures.machineClass_n.query = (SELECT machineClass_n FROM V_MEASURE_GROUP MG WHERE MG.OID=MEASURE_GROUP_MEASURES.MEASURE_GROUP_OID)
measureGroupMeasures.groupName.query = (SELECT NAME FROM V_MEASURE_GROUP MG WHERE MG.OID=MEASURE_GROUP_MEASURES.MEASURE_GROUP_OID)
measureGroupMeasures.groupAlternativeName.query = (SELECT ALTERNATENAME FROM V_MEASURE_GROUP MG WHERE MG.OID=MEASURE_GROUP_MEASURES.MEASURE_GROUP_OID)
measureGroupMeasures.groupType.query = (SELECT GROUPTYPE FROM V_MEASURE_GROUP MG WHERE MG.OID=MEASURE_GROUP_MEASURES.MEASURE_GROUP_OID)
measureGroupMeasures.upperLimit.query = dbo.UNIT_CONV(dbo.resolve_limit(null,(SELECT MG.machineClassOid FROM V_MEASURE_GROUP MG WHERE MG.OID=MEASURE_GROUP_MEASURES.MEASURE_GROUP_OID),MEASURE_OID,'UPPER'), null, (SELECT UNITTYPE FROM V_MEASURE_DEF WHERE OID=MEASURE_OID))
measureGroupMeasures.extremeUpperLimit.query = dbo.UNIT_CONV(dbo.resolve_limit(null,(SELECT MG.machineClassOid FROM V_MEASURE_GROUP MG WHERE MG.OID=MEASURE_GROUP_MEASURES.MEASURE_GROUP_OID),MEASURE_OID,'EXTREMEUPPER'), null, (SELECT UNITTYPE FROM V_MEASURE_DEF WHERE OID=MEASURE_OID))
measureGroupMeasures.target.query = dbo.UNIT_CONV(dbo.resolve_limit(null,(SELECT MG.machineClassOid FROM V_MEASURE_GROUP MG WHERE MG.OID=MEASURE_GROUP_MEASURES.MEASURE_GROUP_OID),MEASURE_OID,'TARGET'), null, (SELECT UNITTYPE FROM V_MEASURE_DEF WHERE OID=MEASURE_OID))
measureGroupMeasures.extremeLowerLimit.query = dbo.UNIT_CONV(dbo.resolve_limit(null,(SELECT MG.machineClassOid FROM V_MEASURE_GROUP MG WHERE MG.OID=MEASURE_GROUP_MEASURES.MEASURE_GROUP_OID),MEASURE_OID,'EXTREMELOWER'), null, (SELECT UNITTYPE FROM V_MEASURE_DEF WHERE OID=MEASURE_OID))
measureGroupMeasures.lowerLimit.query = dbo.UNIT_CONV(dbo.resolve_limit(null,(SELECT MG.machineClassOid FROM V_MEASURE_GROUP MG WHERE MG.OID=MEASURE_GROUP_MEASURES.MEASURE_GROUP_OID),MEASURE_OID,'LOWER'), null, (SELECT UNITTYPE FROM V_MEASURE_DEF WHERE OID=MEASURE_OID))
measureGroup.id.query = OID
measureUnitName.query = dbo.unit_name('FULL', NULL, (SELECT UNIT_TYPE FROM V_MEASURE_DEF WHERE MEASURE_OID=OID))
assignmentGroup.name.query = NAME
crew.oid.query = OID
crew.name.query = NAME
delayActivityClass.name.query = NAME
delayActivityType.name.query = NAME
delayCategory.name.query = NAME
delayClass.name.query = NAME
delayGroup.name.query = NAME
fleet.name.query = NAME
gradeBlock.name.query = NAME
gradeBlockGroup.name.query = NAME
jobCode.name.query = NAME
lane.name.query = NAME
location.name.query = NAME
machine.name.query = NAME
machineCategory.name.query = NAME
machineLicence.name.query = NAME
material.name.query = NAME
person.name.query = NAME
plan.name.query = NAME
roadSegment.description.query = DESCRIPTION
waypoint.name.query = NAME
workGroup.name.query = NAME
zone.name.query = NAME
incidentMessage.machineClass_N.query = (select mc.name + ' (' + CAST(mc.machineclass_oid AS VARCHAR(50)) + ')' from {model}.machineclass mc inner join {model}.machine m on mc.machineclass_oid = m.class where m.machine_oid = incident_message.machine)
incidentMessage.machineClassOID.query = (select mc.machineclass_oid from {model}.machineclass mc inner join {model}.machine m on mc.machineclass_oid = m.class where m.machine_oid = incident_message.machine)
incidentMessage.crew_N.query = (select STRING_AGG(c.name + ' (' + CAST(c.oid AS VARCHAR(50)) + ')', ', ') from {model}.crew c inner join {model}.person_crew pc on pc.crew_oid = c.oid inner join {model}.person p on p.person_oid = pc.person_oid where p.person_oid = incident_message.operator)
incidentMessage.crewOID.query = (select STRING_AGG(pc.crew_oid, ', ') from {model}.person_crew pc inner join {model}.person p on p.person_oid = pc.person_oid where p.person_oid = incident_message.operator)
incidentMessage.shift_N.query = (select s.name + ' (' + CAST(s.oid AS VARCHAR(50)) + ')' from {model}.shift s where s.oid = (dbo.shiftkey_utc(incident_message.event_timestamp_utc)))
incidentMessage.shiftOID.query = (dbo.shiftkey_utc(incident_message.event_timestamp_utc))
