# Copyright (c) 2023 Caterpillar

! suppress inspection "UnusedMessageFormatParameter" for whole file

## General ##

## Logging ##
## @mode region

# It is recommended that File Logging is on except when using Windows Services.
# If using Windows Services turn off File Logging and turn on Console and Wrapper Logging so that all
# messages are captured in the Wrapper Log File instead.
# Note that you can only turn off file logging to the server programs (CommsServer, MineTracking, etc).
# @label Enable File Logging
log.message.file=true

# The maximum size of a log/trace file in MB.  When a log file exceeds this limit, the file will be
# rolled over into a new file.
# @label Maximum log file size (MB)
log.file.maxsize=100

# File name and directory substitutions:<br>
# * {0} -> process name (system property app.name)<br>
# * {1} -> app directory (system property MSTAR_HOME)<br>
# * {2} -> date & time (use Java date formatting, see java.text.SimpleDateFormat)<br>
# * {3} -> same as {2}<br>
# * {4} -> rollover date format (use Java date formatting, see java.text.SimpleDateFormat)<br>
# * {5} -> log directory (system property MSTAR_LOGS)<br>
# * {6} -> trace directory (system property MSTAR_TRACE)
# * {7} -> host name
# @label Log File Specification
log.message.file.spec=file("{5}/{0}_{7}_{4}.log", "daily", "yyyyMMdd", "00:00")

# File name with PID and directory substitutions:<br>
# * {0} -> process name (system property app.name)<br>
# * {1} -> app directory (system property MSTAR_HOME)<br>
# * {2} -> date & time (use Java date formatting, see java.text.SimpleDateFormat)<br>
# * {3} -> same as {2}<br>
# * {4} -> rollover date format (use Java date formatting, see java.text.SimpleDateFormat)<br>
# * {5} -> log directory (system property MSTAR_LOGS)<br>
# * {6} -> trace directory (system property MSTAR_TRACE)
# * {7} -> host name
# * {8} -> "_" + PID
# @label Log File Specification with PID
log.message.file.spec.pid=file("{5}/{0}_{7}_{4}{8}.log", "daily", "yyyyMMdd", "00:00")

## Console ##
# It is recommended that Console Logging is always left on. If Windows Services are being used, also enable Wrapper
# Logging so that the Console Logging messages appear in the Wrapper Log File.
# @label Enable Console Logging
## @mode region

log.message.console=true

## Windows Services ##
## @mode region

# When using Windows Services, it is recommended that Wrapper Logging and Console Logging are on and File Logging is off.
# @label Enable Wrapper Logging
_WIN_SVC_WRAPPER_LOG_ENABLED=true


## Tracing ##
## @mode region

# @label Enable Tracing
log.trace.on=true

# If Windows Services are being used, turn off Tracing to the Console otherwise the trace messages will increase the size of the
# Windows Services log files.
# @label Enable Tracing to the Console
log.trace.console=true

# @label Timestamp Trace Messages
log.trace.decorate.timestamp=true


## Metrics ##
## @mode region

# Collection of JDBC metrics may help diagnose database related performance issues, but can cause large performance log files to be written.
# @label Enable JDBC Metrics
log.jdbc.metrics.on=false


## Message Formats ##

# The format for log messages where no other format is specified
# @label Log
log.message.format=${level(message)}: {${timestamp} }{${message.resource} }

# The format for error messages
# @label Error
log.message.format.error=${level(message)}: {${timestamp} }{[${thread.id}] }{[${class(short)}] }{${message.resource} }{Thread ${thread}}{\nSTACKTRACE:\n${stacktrace}}{\nTHROWABLE: ${throwable}}

# The format for warning messages
# @label Warning
log.message.format.warning=${level(message)}: {${timestamp} }{[${thread.id}] }{[${class(short)}] }{${message.resource} }

# The format for info messages
# @label Info
log.message.format.info=${level(message)}: {${timestamp} }{[${thread.id}] }{[${class(short)}] }{${message.resource} }

# The format for bug messages
# @label Bug
log.message.format.bug=${level(message)}: {${timestamp} }{[${thread.id}] }{[${class(short)}] }{${message.resource} }{Thread ${thread}}{\nSTACKTRACE:\n${stacktrace}}{\nTHROWABLE: ${throwable}}

# The format for performance messages
# @label Performance
log.message.format.performance=${level(message)}: {${timestamp} }{${message.resource} }

# The format for trace messages
# @label Trace
log.trace.format={${timestamp} }{[${thread.id}] }{[${class(short)}] }{${message.resource} }

## Packages to Trace ##

! Some defaults until levels configurable via supervisor ...

# @label IAssignment
log.trace.pf.minestar.assignment = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Cycles
log.trace.pf.com.mincom.works.cc.cycle = (1,console()),(3,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Delays
log.trace.pf.minestar.production.service.delay = (1,console()),(5,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label KPI Summaries
log.trace.pf.minestar.production.service.kpisummaries = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Machine Tracking
log.trace.pf.minestar.machinetracking = (4,console()),(10,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Autonomy
log.trace.pf.minestar.autonomy = (10,console()),(10,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Mode Control
log.trace.pf.minestar.mode = (10,console()),(10,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label UI Facade
log.trace.pf.minestar.uifacade = (10,console()),(10,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label UI Facade KPI
log.trace.pf.minestar.production.uifacade.kpi.impl = (10,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Health
log.trace.pf.minestar.health = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Mine Domain
log.trace.pf.minestar.mine.domain = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Mine Model Persistence
log.trace.pf.minestar.mine.persistence = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Mine Model Update
log.trace.pf.minestar.minemodelupdate = (10,console()),(10,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Mine Service
log.trace.pf.minestar.mine.service = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Health Jobs
log.trace.pf.com.mincom.util.job = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Works Components
log.trace.pf.com.mincom.works.cc = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Site Monitor and Site Editor
log.trace.pf.com.mincom.works.page.bev = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Dump Plan Editor
log.trace.pf.minestar.mine.presentation.page.plan.dumpplan = (2,console()),(0,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Graph Layer
log.trace.pf.minestar.mine.application.graph.layer = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Graph Panel
log.trace.pf.minestar.mine.application.graph.coord = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Surface
log.trace.pf.minestar.surface = (10,console()),(10,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Production Pre-processing
log.trace.pf.minestar.production.preprocessing = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Production Pre-processing
log.trace.pf.minestar.production = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Production eventmapping
log.trace.pf.minestar.production.eventmapping = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label PLC (Crusher) API
log.trace.pf.minestar.plc = (4,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label PLC (Crusher) Service
log.trace.pf.minestar.autonomy.service.plc = (4,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Modbus Messages
log.trace.pf.minestar.plc.crusher.modbus = (4,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label PLC (Crusher) Connections
log.trace.pf.com.mincom.util.connection = (4,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Works GUI
log.trace.pf.com.mincom.works.gui = (4,console()),(0,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Jive
log.trace.pf.com.mincom.jive = (1,console()),(0,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Statistics for Client
log.trace.pf.com.mincom.works.page.common.text = (5,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Pit Model
log.trace.pf.minestar.pitlink.service.pitmodel = (4,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Communications
log.trace.pf.minestar.pitlink.service.communications = (4,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Pseudolite
log.trace.pf.minestar.pitlink.service.pseudolite = (4,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Data Bridge
log.trace.pf.minestar.platform.service.databridge = (4,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Fleet Assignment
log.trace.pf.minestar.pitlink.service.fleet.assignment = (4,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Site Awareness
log.trace.pf.minestar.pitlink.service.awareness = (10,console()),(10,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Underground Assignment State Machine
log.trace.pf.minestar.assignment.service.model.underground.FSM = (4,console()),(6,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Underground Assignment Triggers
log.trace.pf.minestar.assignment.service.model.underground.FSM.Trigger = (4,console()),(6,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Underground Assignment State Model
log.trace.pf.minestar.assignment.service.model.underground = (4,console()),(6,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Underground Assignment Services
log.trace.pf.minestar.assignment.service.underground = (4,console()),(6,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Detect Incident Processing
log.trace.pf.com.mincom.integ = (5,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Blending Services
log.trace.pf.minestar.production.service.blend = (5,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Minetracking Material Services
log.trace.pf.minestar.production.service.material = (5,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Minetracking Payload Services
log.trace.pf.minestar.production.service.payload = (5,console()),(2,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Minetracking Timeline Services
log.trace.pf.minestar.production.service.timeline = (5,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Blending to destination
log.trace.pf.minestar.btd = (5,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Onboard Services
log.trace.pf.com.mincom.integ.cat.equip.onboard=(5,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Web Feature Service
log.trace.pf.minestar.wfs=(1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Security
log.trace.pf.minestar.security.base=(5,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Scheduled Assignment
log.trace.pf.minestar.assignment.service.scheduledassignment=(5,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label JSON export and import
log.trace.pf.com.mincom.tool.jsonexport=(4,console()),(6,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Data Publish Extension
log.trace.pf.com.cat.minestar.extension.dps=(1,console()),(1,file("DataPublishExtension_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Edge Adapter Extension
log.trace.pf.minestar.edgeadapter=(1,console()),(1,file("EdgeAdapterExtension_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Fusion Dipper Extension
log.trace.pf.minestar.fusion.dipper=(1,console()),(1,file("FusionDipperExtension_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Truth Positioning Service
log.trace.pf.minestar.pitlink.service.truepos = (10,console()),(10,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Surface Saturation Service
log.trace.pf.minestar.pitlink.service.surfacesaturation = (5,console()),(7,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Destination Detour Service
log.trace.pf.minestar.pitlink.service.detour = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Plan Management
log.trace.pf.minestar.planmanagement = (10,console()),(1,file("PlanManagement_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Material Grade Determination Extension
log.trace.pf.com.cat.minestar.extension.mgd=(1,console()),(1,file("MaterialGradeDeterminationExtension_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Apex Server
log.trace.pf.minestar.apex.server=(1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Data Import Export
log.trace.pf.minestar.platform.persistence.service.importexport=(1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

# @label Plan Management Forecast
log.trace.pf.minestar.planmanagement.service.ProdPlanTaskForecastServiceImpl=(1,console()),(1,file("Forecast_{4}{8}.log", "daily", "MMdd", "00:00"))

!# @All MineStar
!log.trace.pf.minestar = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))

!# @All Works
!log.trace.pf.com.mincom.works = (1,console()),(1,file("{0}_{4}{8}.log", "daily", "MMdd", "00:00"))


## Custom Packages ##
## @mode region
## @label
