<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
        "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd">
<hibernate-mapping schema="historical" default-access="field" default-lazy="true">

    <class
            name="minestar.platform.domain.event.log.EventLogProvider"
            table="EVENT_LOG_PROVIDER">
        <meta attribute="view-include">false</meta>
        <meta attribute="table">
            tablespace=MW_USR
        </meta>
        <meta attribute="primary-key">
            tablespace=MW_USR
        </meta>
        <meta attribute="index">
            name=EVENT_LOG_PROVIDER_I1
            columns=EVENT_TYPE, REF_OID, REF_NAME
            unique=true
            tablespace=MW_USR
        </meta>
        <id
                name="oid"
                type="java.lang.Long"
                column="OID"
                access="field">
            <generator class="com.mincom.env.base.persistence.IDGenerator"/>
        </id>

        <property
                name="eventType"
                column="EVENT_TYPE"
                not-null="true"
                type="java.lang.String"
                length="255">
        </property>
        <property
                name="refOID"
                type="java.lang.Long"
                column="REF_OID">
        </property>
        <property
                name="refName"
                type="java.lang.String"
                column="REF_NAME"
                length="255">
        </property>

        <property name="timestamp" type="TimestampType" >
            <meta attribute="timestamp">true</meta>
            <meta attribute="utc-description">The utc time the record was created.</meta>
            <meta attribute="description">The utc time the record was created.</meta>
            <meta attribute="view-localtime">true</meta>
            <column name="TIMESTAMP_UTC" not-null="true"/>
        </property>

    </class>

    <class
            name="minestar.platform.domain.event.log.EventLogEntry"
            table="EVENT_LOG_ENTRY">
        <meta attribute="view-include">false</meta>
        <meta attribute="table">
            tablespace=MW_USR
        </meta>
        <meta attribute="primary-key">
            tablespace=MW_USR
        </meta>
        <meta attribute="index">
            name=EVENT_LOG_ENTRY_I1
            columns=EVENT_PROV_ID, TIMESTAMP_UTC
            unique=false
            tablespace=MW_USR
        </meta>
        <id
                name="oid"
                type="java.lang.Long"
                column="OID"
                access="field">
            <generator class="com.mincom.env.base.persistence.IDGenerator"/>
        </id>

        <!--
           Map the foreign key explicitly for access independent of the
           mapped EventLogProvider object.
        -->
        <property
                name="providerOID"
                type="java.lang.Long"
                column="EVENT_PROV_OID"
                insert="false"
                update="false"
                not-null="true">
        </property>

        <!-- Do not want the foreign key object, make it lazy -->
        <many-to-one name="eventLogProvider"
                     class="minestar.platform.domain.event.log.EventLogProvider"
                     lazy="no-proxy"
                     fetch="select">
            <column name="EVENT_PROV_OID" not-null="true"/>
        </many-to-one>

        <property name="timestamp" type="TimestampType" >
            <meta attribute="timestamp">true</meta>
            <meta attribute="utc-description">The utc time the record was created.</meta>
            <meta attribute="description">The utc time the record was created.</meta>
            <meta attribute="view-localtime">true</meta>
            <column name="TIMESTAMP_UTC" not-null="true"/>
        </property>

        <!--
            VARCHAR max in Oracle is 4000, SQLServer is 8000 so choose the lesser.
            CLOB could be used here, but they are best used through a streaming API.
            Mstar uses DAO layers with discrete hibernate objects.

            type="text" maps to nvarchar(max) in sql and clob in oracle for big log events
        -->
        <property
                name="content"
                column="EVENT_CONTENT"
                type="text"
                not-null="false"
        >
        </property>


    </class>

</hibernate-mapping>
