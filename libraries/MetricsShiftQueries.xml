<?xml version="1.0" encoding="utf-8" ?>
<queries version="5.2" >
    <query name="shiftBoundaries" itemName="shift" sqlparams="sf" timeout="90" >
        select ? as start_time_utc,? as end_time_utc
        from v_dual
    </query>
    <query name="cycleCounts" itemName="cycleCount" sqlparams="sf" timeout="150" >
        select primarymachine, creationmode, count(*) as num
        from cycle
        where (endtime_utc &gt; ? ) and (endtime_utc &lt;= ?)
        group by primarymachine, creationmode
    </query>
    <query name="cycles" itemName="cycle" sqlparams="sf" timeout="150" >
        SELECT *
        FROM cycle
        WHERE (endtime_utc &gt; ? ) and (endtime_utc &lt;= ?)
    </query>
    <query name="servicemeterreadings" itemName="servicemeterreading" sqlparams="sf" timeout="150" >
        SELECT *
        FROM servicemeterreading
        WHERE (readingdate_utc &gt; ? ) and (readingdate_utc &lt;= ?)
    </query>
    <query name="delays" itemName="delay" sqlparams="sf" timeout="150" >
        SELECT *
        FROM delay
        WHERE (start1_utc &gt; ? ) and (start1_utc &lt;= ?)
    </query>
    <query name="delay_activities" itemName="delay_activity" sqlparams="sf" timeout="150" >
        SELECT *
        FROM delay_activity
        WHERE delay_oid IN
        (SELECT delay_oid
        FROM delay
        WHERE (start1_utc &gt; ? ) and (start1_utc &lt;= ?))
    </query>
    <query name="cycleactivitycomponents" itemName="cycleactivitycomponent" sqlparams="sf" timeout="150" >
        SELECT *
        FROM cycleactivitycomponent
        WHERE (end_time_utc &gt; ? ) and (end_time_utc &lt;= ?)
    </query>
    <query name="fluid_smu_records" itemName="fluid_smu_record" sqlparams="sf" timeout="150" >
        SELECT *
        FROM fluid_smu_record
        WHERE (timestamp_utc &gt; ? ) and (timestamp_utc &lt;= ?)
    </query>
    <query name="fluid_record_fluidentries" itemName="fluid_record_fluidentry" sqlparams="sf" timeout="150" >
        SELECT *
        FROM fluid_record_fluidentry
        WHERE record_oid IN
        (SELECT oid
        FROM fluid_smu_record
        WHERE (timestamp_utc &gt; ? ) and (timestamp_utc &lt;= ?))
    </query>
    <query name="server_start_informations" itemName="server_start_information" sqlparams="sf" timeout="150" >
        SELECT *
        FROM server_start_info
        WHERE (starttime_utc &gt; ? ) and (starttime_utc &lt;= ?)
    </query>
    <query name="drill_hole_positions" itemName="drill_hole_position" sqlparams="sf" timeout="150" >
        SELECT *
        FROM drill_hole_position
        WHERE (drill_finish_utc &gt; ? ) and (drill_finish_utc &lt;= ?)
    </query>
    <query name="drill_hole_profiles" itemName="drill_hole_profile" sqlparams="sf" timeout="150" >
        SELECT *
        FROM drill_hole_profile
        WHERE (slice_end_utc &gt; ? ) and (slice_end_utc &lt;= ?)
    </query>
    <query name="drill_hole_informations" itemName="drill_hole_information" sqlparams="sf" timeout="150" >
        SELECT *
        FROM drill_hole_information
        WHERE (drill_finish_utc &gt; ? ) and (drill_finish_utc &lt;= ?)
    </query>
    <query name="productionTotals" itemName="production" sqlparams="ssf" timeout="150" >
        select c.primarymachine, c.secondarymachine, c.sourcelocation, c.sourcelocationname, c.endsinklocation, c.endsinklocationname, c.loadermaterial, c.rehandle, extract(hour from c.endtime_utc - s.start_time_utc) as shift_hour, count(*) as num, sum(c.payload) as kgs
        from cycle c
        cross join (select ? as start_time_utc from v_dual) s
        where (c.endtime_utc &gt; ? ) and (c.endtime_utc &lt;= ?)
        and c.payload &gt; 0 group by c.primarymachine, c.secondarymachine, c.sourcelocation, c.sourcelocationname, c.endsinklocation, c.endsinklocationname, c.loadermaterial, c.rehandle, extract(hour from c.endtime_utc - s.start_time_utc)
    </query>
    <query name="openAssignmentCounts" itemName="openAssignmentCount" sqlparams="sf" timeout="150" >
        select server, serverdest, assignmenttype, assignedmaterial, reason, count(*) as num, sum(case when freedestpercent>0 then 1 else 0 end) as freenum, sum(case when freegrpdestpercent>0 then 1 else 0 end) as freegrpnum
        from assignment_event
        where (timestamp_utc &gt; ? ) and (timestamp_utc &lt;= ?)
        group by server, serverdest, assignmenttype, assignedmaterial, reason
    </query>
    <query name="efhTotals" itemName="efhTotal" sqlparams="sf" timeout="150" >
        select c.primarymachine, c.loadermaterial, r.load_status, sum(r.efh_magnitude) as efh, sum(r.travel_dist_magnitude) as travel_dist, sum(r.expected_time_magnitude) as expected_time
        from cycleroadsegment r
        join cycle c on r.oid = c.cycle_oid
        where (c.endtime_utc &gt; ? ) and (c.endtime_utc &lt;= ?)
        group by c.primarymachine, c.loadermaterial, r.load_status
    </query>
    <query name="efhOperatingTimes" itemName="efhOperatingTime" sqlparams="sf" timeout="150" >
        select c.primarymachineoid as primarymachine, c.loadermaterialoid as loadermaterial, sum(c.loadedActualTravelDuration) as loadedTime, sum(c.emptyActualTravelDuration) as emptyTime
        from v_cycle c
        where (c.endtime_utc &gt; ? ) and (c.endtime_utc &lt;= ?)
        group by c.primarymachineoid, c.loadermaterialoid
    </query>
    <query name="drillMetres" itemName="drill" sqlparams="sf" timeout="90" >
        select c.primarymachine, count(*) as num, sum(h.depth_actual) as metres
        from cycle c inner join drill_hole_information h on h.oid = cycle_oid
        where (c.endtime_utc &gt; ? ) and (c.endtime_utc &lt;= ?)
        group by c.primarymachine
    </query>
    <query name="speedDistribution" itemName="speed" sqlparams="sf" timeout="300" >
        select primarymachineoid, primaryoperatoroid,
        round(min(empty_speed), 2) as "min_es",
        round(min(loaded_speed), 2) as "min_ls",
        round(max(empty_speed), 2) as "max_es",
        round(max(loaded_speed), 2) as "max_ls",
        round(avg(empty_speed), 2) as "avg_es",
        round(avg(loaded_speed), 2) as "avg_ls",
        SUM(CASE WHEN empty_speed IS NULL THEN 1 ELSE 0 END) AS "es_unknown",
        SUM(CASE WHEN empty_speed = 0 THEN 1 ELSE 0 END) AS "es_zero",
        SUM(CASE WHEN empty_speed &gt; 0 AND empty_speed &lt; 1 THEN 1 ELSE 0 END) AS "es_0to1",
        SUM(CASE WHEN empty_speed &gt;= 1 AND empty_speed &lt; 2 THEN 1 ELSE 0 END) AS "es_1to2",
        SUM(CASE WHEN empty_speed &gt;= 2 AND empty_speed &lt; 3 THEN 1 ELSE 0 END) AS "es_2to3",
        SUM(CASE WHEN empty_speed &gt;= 3 AND empty_speed &lt; 4 THEN 1 ELSE 0 END) AS "es_3to4",
        SUM(CASE WHEN empty_speed &gt;= 4 AND empty_speed &lt; 5 THEN 1 ELSE 0 END) AS "es_4to5",
        SUM(CASE WHEN empty_speed &gt;= 5 AND empty_speed &lt; 6 THEN 1 ELSE 0 END) AS "es_5to6",
        SUM(CASE WHEN empty_speed &gt;= 6 AND empty_speed &lt; 7 THEN 1 ELSE 0 END) AS "es_6to7",
        SUM(CASE WHEN empty_speed &gt;= 7 AND empty_speed &lt; 8 THEN 1 ELSE 0 END) AS "es_7to8",
        SUM(CASE WHEN empty_speed &gt;= 8 AND empty_speed &lt; 9 THEN 1 ELSE 0 END) AS "es_8to9",
        SUM(CASE WHEN empty_speed &gt;= 9 AND empty_speed &lt; 10 THEN 1 ELSE 0 END) AS "es_9to10",
        SUM(CASE WHEN empty_speed &gt;= 10 AND empty_speed &lt; 11 THEN 1 ELSE 0 END) AS "es_10to11",
        SUM(CASE WHEN empty_speed &gt;= 11 AND empty_speed &lt; 12 THEN 1 ELSE 0 END) AS "es_11to12",
        SUM(CASE WHEN empty_speed &gt;= 12 AND empty_speed &lt; 13 THEN 1 ELSE 0 END) AS "es_12to2",
        SUM(CASE WHEN empty_speed &gt;= 13 AND empty_speed &lt; 14 THEN 1 ELSE 0 END) AS "es_13to3",
        SUM(CASE WHEN empty_speed &gt;= 14 AND empty_speed &lt; 15 THEN 1 ELSE 0 END) AS "es_14to3",
        SUM(CASE WHEN empty_speed &gt;= 15 AND empty_speed &lt; 16 THEN 1 ELSE 0 END) AS "es_15to3",
        SUM(CASE WHEN empty_speed &gt;= 16 AND empty_speed &lt; 17 THEN 1 ELSE 0 END) AS "es_16to3",
        SUM(CASE WHEN empty_speed &gt;= 17 AND empty_speed &lt; 18 THEN 1 ELSE 0 END) AS "es_17to3",
        SUM(CASE WHEN empty_speed &gt;= 18 AND empty_speed &lt; 19 THEN 1 ELSE 0 END) AS "es_18to3",
        SUM(CASE WHEN empty_speed &gt;= 19 AND empty_speed &lt; 20 THEN 1 ELSE 0 END) AS "es_19to3",
        SUM(CASE WHEN empty_speed &gt;= 20 AND empty_speed &lt; 21 THEN 1 ELSE 0 END) AS "es_20to3",
        SUM(CASE WHEN empty_speed &gt;= 21 AND empty_speed &lt; 22 THEN 1 ELSE 0 END) AS "es_21to3",
        SUM(CASE WHEN empty_speed &gt;= 22 AND empty_speed &lt; 23 THEN 1 ELSE 0 END) AS "es_22to3",
        SUM(CASE WHEN empty_speed &gt;= 23 AND empty_speed &lt; 24 THEN 1 ELSE 0 END) AS "es_23to3",
        SUM(CASE WHEN empty_speed &gt;= 24 AND empty_speed &lt; 25 THEN 1 ELSE 0 END) AS "es_24to3",
        SUM(CASE WHEN empty_speed &gt;= 25 AND empty_speed &lt; 26 THEN 1 ELSE 0 END) AS "es_25to3",
        SUM(CASE WHEN empty_speed &gt;= 26 AND empty_speed &lt; 27 THEN 1 ELSE 0 END) AS "es_26to3",
        SUM(CASE WHEN empty_speed &gt;= 27 AND empty_speed &lt; 28 THEN 1 ELSE 0 END) AS "es_27to3",
        SUM(CASE WHEN empty_speed &gt;= 28 AND empty_speed &lt; 29 THEN 1 ELSE 0 END) AS "es_28to3",
        SUM(CASE WHEN empty_speed &gt;= 29 AND empty_speed &lt; 30 THEN 1 ELSE 0 END) AS "es_29to3",
        SUM(CASE WHEN empty_speed &gt;= 30 AND empty_speed &lt; 40 THEN 1 ELSE 0 END) AS "es_30to40",
        SUM(CASE WHEN empty_speed &gt;= 40 AND empty_speed &lt; 50 THEN 1 ELSE 0 END) AS "es_40to50",
        SUM(CASE WHEN empty_speed &gt;= 50 AND empty_speed &lt; 60 THEN 1 ELSE 0 END) AS "es_50to60",
        SUM(CASE WHEN loaded_speed IS NULL THEN 1 ELSE 0 END) AS "ls_unknown",
        SUM(CASE WHEN loaded_speed = 0 THEN 1 ELSE 0 END) AS "ls_zero",
        SUM(CASE WHEN loaded_speed &gt; 0 AND loaded_speed &lt; 1 THEN 1 ELSE 0 END) AS "ls_0to1",
        SUM(CASE WHEN loaded_speed &gt;= 1 AND loaded_speed &lt; 2 THEN 1 ELSE 0 END) AS "ls_1to2",
        SUM(CASE WHEN loaded_speed &gt;= 2 AND loaded_speed &lt; 3 THEN 1 ELSE 0 END) AS "ls_2to3",
        SUM(CASE WHEN loaded_speed &gt;= 3 AND loaded_speed &lt; 4 THEN 1 ELSE 0 END) AS "ls_3to4",
        SUM(CASE WHEN loaded_speed &gt;= 4 AND loaded_speed &lt; 5 THEN 1 ELSE 0 END) AS "ls_4to5",
        SUM(CASE WHEN loaded_speed &gt;= 5 AND loaded_speed &lt; 6 THEN 1 ELSE 0 END) AS "ls_5to6",
        SUM(CASE WHEN loaded_speed &gt;= 6 AND loaded_speed &lt; 7 THEN 1 ELSE 0 END) AS "ls_6to7",
        SUM(CASE WHEN loaded_speed &gt;= 7 AND loaded_speed &lt; 8 THEN 1 ELSE 0 END) AS "ls_7to8",
        SUM(CASE WHEN loaded_speed &gt;= 8 AND loaded_speed &lt; 9 THEN 1 ELSE 0 END) AS "ls_8to9",
        SUM(CASE WHEN loaded_speed &gt;= 9 AND loaded_speed &lt; 10 THEN 1 ELSE 0 END) AS "ls_9to10",
        SUM(CASE WHEN loaded_speed &gt;= 10 AND loaded_speed &lt; 11 THEN 1 ELSE 0 END) AS "ls_10to11",
        SUM(CASE WHEN loaded_speed &gt;= 11 AND loaded_speed &lt; 12 THEN 1 ELSE 0 END) AS "ls_11to12",
        SUM(CASE WHEN loaded_speed &gt;= 12 AND loaded_speed &lt; 13 THEN 1 ELSE 0 END) AS "ls_12to2",
        SUM(CASE WHEN loaded_speed &gt;= 13 AND loaded_speed &lt; 14 THEN 1 ELSE 0 END) AS "ls_13to3",
        SUM(CASE WHEN loaded_speed &gt;= 14 AND loaded_speed &lt; 15 THEN 1 ELSE 0 END) AS "ls_14to3",
        SUM(CASE WHEN loaded_speed &gt;= 15 AND loaded_speed &lt; 16 THEN 1 ELSE 0 END) AS "ls_15to3",
        SUM(CASE WHEN loaded_speed &gt;= 16 AND loaded_speed &lt; 17 THEN 1 ELSE 0 END) AS "ls_16to3",
        SUM(CASE WHEN loaded_speed &gt;= 17 AND loaded_speed &lt; 18 THEN 1 ELSE 0 END) AS "ls_17to3",
        SUM(CASE WHEN loaded_speed &gt;= 18 AND loaded_speed &lt; 19 THEN 1 ELSE 0 END) AS "ls_18to3",
        SUM(CASE WHEN loaded_speed &gt;= 19 AND loaded_speed &lt; 20 THEN 1 ELSE 0 END) AS "ls_19to3",
        SUM(CASE WHEN loaded_speed &gt;= 20 AND loaded_speed &lt; 21 THEN 1 ELSE 0 END) AS "ls_20to3",
        SUM(CASE WHEN loaded_speed &gt;= 21 AND loaded_speed &lt; 22 THEN 1 ELSE 0 END) AS "ls_21to3",
        SUM(CASE WHEN loaded_speed &gt;= 22 AND loaded_speed &lt; 23 THEN 1 ELSE 0 END) AS "ls_22to3",
        SUM(CASE WHEN loaded_speed &gt;= 23 AND loaded_speed &lt; 24 THEN 1 ELSE 0 END) AS "ls_23to3",
        SUM(CASE WHEN loaded_speed &gt;= 24 AND loaded_speed &lt; 25 THEN 1 ELSE 0 END) AS "ls_24to3",
        SUM(CASE WHEN loaded_speed &gt;= 25 AND loaded_speed &lt; 26 THEN 1 ELSE 0 END) AS "ls_25to3",
        SUM(CASE WHEN loaded_speed &gt;= 26 AND loaded_speed &lt; 27 THEN 1 ELSE 0 END) AS "ls_26to3",
        SUM(CASE WHEN loaded_speed &gt;= 27 AND loaded_speed &lt; 28 THEN 1 ELSE 0 END) AS "ls_27to3",
        SUM(CASE WHEN loaded_speed &gt;= 28 AND loaded_speed &lt; 29 THEN 1 ELSE 0 END) AS "ls_28to3",
        SUM(CASE WHEN loaded_speed &gt;= 29 AND loaded_speed &lt; 30 THEN 1 ELSE 0 END) AS "ls_29to3",
        SUM(CASE WHEN loaded_speed &gt;= 30 AND loaded_speed &lt; 40 THEN 1 ELSE 0 END) AS "ls_30to40",
        SUM(CASE WHEN loaded_speed &gt;= 40 AND loaded_speed &lt; 50 THEN 1 ELSE 0 END) AS "ls_40to50",
        SUM(CASE WHEN loaded_speed &gt;= 50 AND loaded_speed &lt; 60 THEN 1 ELSE 0 END) AS "ls_50to60"
        FROM (
        SELECT c.primarymachineoid, c.primaryoperatoroid,
        (CASE WHEN c.emptyactualtravelduration = null OR c.emptyefhdistance = null THEN null
        WHEN c.emptyactualtravelduration = 0 THEN 0
        ELSE round(c.emptyefhdistance / c.emptyactualtravelduration, 2) END) empty_speed,
        (CASE WHEN c.loadedactualtravelduration = null OR c.loadedefhdistance = null THEN null
        WHEN c.loadedactualtravelduration = 0 THEN 0
        ELSE round(c.loadedefhdistance / c.loadedactualtravelduration, 2) END) loaded_speed
        FROM v_cycle c
        where (c.endtime_utc &gt; ? ) and (c.endtime_utc &lt;= ?)
        )
        GROUP BY primarymachineoid, primaryoperatoroid
    </query>
    <query name="fuelUsage" itemName="fuel" sqlparams="sf" timeout="90" >
        select primarymachine, count(*) as num, sum(fuelused) as fuelused, max(endsmu) as endsmu
        from cycle
        where (endtime_utc &gt; ? ) and (endtime_utc &lt;= ?) and (fuelused &lt;&gt; 0)
        group by primarymachine
    </query>
    <query name="startingActivity" itemName="machine" sqlparams="sss" timeout="90" >
        select c.primarymachine, c.secondarymachine, a.name as activity_name, round(sum(cast(a.end_time_utc as date) - cast(? as date)) * 86400,0) as duration
        from cycle c join cycleactivitycomponent a on a.oid = c.cycle_oid
        where (a.start_time_utc &lt; ? ) and (a.end_time_utc &gt; ? )
        group by c.primarymachine, c.secondarymachine, a.name
    </query>
    <query name="endingActivity" itemName="machine" sqlparams="fff" timeout="90" >
        select c.primarymachine, c.secondarymachine, a.name as activity_name, round(sum(cast(? as date) - cast(a.start_time_utc as date)) * 86400,0) as duration
        from cycle c join cycleactivitycomponent a on a.oid = c.cycle_oid
        where (a.start_time_utc &lt; ? ) and (a.end_time_utc &gt; ? )
        group by c.primarymachine, c.secondarymachine, a.name
    </query>
    <query name="delayDurations" itemName="delay" sqlparams="sf" timeout="90" >
        select d.target_machine as machine_oid, d.DELAYCLASS as delay_type_oid, d.workorder_ref, round(sum(cast(d.finish_utc as date) - cast(d.start1_utc as date)) * 86400,0) as duration
        from delay d
        where (d.start1_utc &gt;= ?) and (d.finish_utc &lt;= ?)
        group by d.target_machine, d.DELAYCLASS, d.workorder_ref
    </query>
    <query name="startingDelay" itemName="machine" sqlparams="sss" timeout="90" >
        select d.target_machine as machine_oid, d.DELAYCLASS as delay_type_oid, d.workorder_ref, round(sum(cast(d.finish_utc as date) - cast(? as date)) * 86400,0) as duration
        from delay d
        where (d.start1_utc &lt; ? ) and (d.finish_utc &gt; ? )
        group by d.target_machine, d.DELAYCLASS, d.workorder_ref
    </query>
    <query name="endingDelay" itemName="machine" sqlparams="fff" timeout="90" >
        select d.target_machine as machine_oid, d.DELAYCLASS as delay_type_oid, d.workorder_ref, round(sum(cast(? as date) - cast(d.start1_utc as date)) * 86400,0) as duration
        from delay d
        where (d.start1_utc &lt; ? ) and (d.finish_utc &gt; ? )
        group by d.target_machine, d.DELAYCLASS, d.workorder_ref
    </query>
    <query name="missedWaypoints" itemName="missedWaypoint" sqlparams="sf" timeout="90" >
        select message, count(*) as num
        from assignment_event
        where reason = 'Off Course Assignment Request'
        and (source_timestamp_utc &gt; ? ) and (source_timestamp_utc &lt; ? )
        group by message
        having count(*) &gt;= 3
    </query>
	<query name="healthEvents" itemName="healthEvent" sqlparams="sf" timeout="30" >
        select *
        from health_event
        where (helevel &gt;= 2) and (source_timestamp_utc &gt; ? ) and (source_timestamp_utc &lt; ? )
    </query>
    <query name="gradeblocks" itemName="gradeblock" sqlparams="sf" timeout="30" >
        SELECT *
        FROM {model}.gradeblock
        WHERE gradeblock_oid IN
        (
        SELECT sourceblock
        FROM cycle
        WHERE (endtime_utc &gt; ? ) and (endtime_utc &lt;= ?)
        )
    </query>
    <query name="gradeblock_cont_values" itemName="gradeblock_cont_value" sqlparams="sf" timeout="30" >
        SELECT *
        FROM {model}.gradeblock_cont_value WHERE oid IN
        (
        SELECT sourceblock
        FROM cycle
        WHERE (endtime_utc &gt; ? ) and (endtime_utc &lt;= ?)
        )
    </query>
    <query name="gradeblock_disc_values" itemName="gradeblock_disc_value" sqlparams="sf" timeout="30" >
        SELECT *
        FROM {model}.gradeblock_disc_value WHERE oid IN
        (
        SELECT sourceblock
        FROM cycle
        WHERE (endtime_utc &gt; ? ) and (endtime_utc &lt;= ?)
        )
    </query>
    <query name="healthFileCounts" itemName="healthFileCount" sqlparams="sf" timeout="30" >
        SELECT MACHINE_OID, COUNT(*) AS FILECOUNT
        FROM HEALTH_LOG
        WHERE (LASTMODIFIED_UTC &gt; ?) AND (LASTMODIFIED_UTC &lt;= ?)
        GROUP BY MACHINE_OID
    </query>
</queries>
